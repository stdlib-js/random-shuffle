{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/factory.js","../lib/index.js","../lib/shuffle.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {string} [options.copy] - string denoting whether to return a copy (`deep`, `shallow` or `none`)\n* @returns {(null|Error)} null or an error\n*\n* @example\n* var opts = {};\n* var options = {\n*     'copy': 'shallow'\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\topts.copy = options.copy;\n\t\tif ( !isString( opts.copy ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'copy', opts.copy ) );\n\t\t}\n\t\tif (\n\t\t\topts.copy !== 'deep' &&\n\t\t\topts.copy !== 'shallow' &&\n\t\t\topts.copy !== 'none'\n\t\t) {\n\t\t\treturn new TypeError( format( 'invalid option. `copy` option must be `deep`, `shallow`, or `none`. Value: `%s`.', opts.copy ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isArrayLike = require( '@stdlib/assert-is-array-like' );\nvar isTypedArrayLike = require( '@stdlib/assert-is-typed-array-like' );\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar deepCopy = require( '@stdlib/utils-copy' );\nvar floor = require( '@stdlib/math-base-special-floor' );\nvar randu = require( '@stdlib/random-base-mt19937' ).factory;\nvar format = require( '@stdlib/string-format' );\nvar defaults = require( './defaults.json' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function to create a random permutation of elements from an array-like object.\n*\n* @param {Options} [config] - function options\n* @param {PositiveInteger} [config.seed] - integer-valued seed\n* @param {string} [config.copy=\"shallow\"] - default copy option (`deep`, `shallow` or `none`)\n* @throws {TypeError} options argument must be an object\n* @returns {Function} shuffle function\n*\n* @example\n* var shuffle = factory({\n*     'seed': 249\n* });\n* var data = [ 3, 8, 4, 8 ];\n* var out = shuffle( data );\n* // e.g., returns [ 4, 3, 8, 8 ]\n*/\nfunction factory( config ) {\n\tvar conf;\n\tvar rand;\n\tvar err;\n\n\tconf = deepCopy( defaults );\n\tif ( arguments.length ) {\n\t\terr = validate( conf, config );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( config && config.seed ) {\n\t\trand = randu({\n\t\t\t'seed': config.seed\n\t\t});\n\t} else {\n\t\trand = randu();\n\t}\n\tsetReadOnly( shuffle, 'seed', rand.seed );\n\tsetReadOnly( shuffle, 'PRNG', rand );\n\n\trand = rand.normalized;\n\n\treturn shuffle;\n\n\t/**\n\t* Returns a random permutation of elements in `arr`.\n\t*\n\t* @private\n\t* @param {(ArrayLike|TypedArrayLike)} arr - array-like object to shuffle\n\t* @param {Options} [options] - function options\n\t* @param {string} [options.copy] - string indicating whether to return a copy (`deep`,`shallow` or `none`)\n\t* @throws {TypeError} first argument must be array-like\n\t* @throws {TypeError} options must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {ArrayLike} the shuffled array-like object\n\t*\n\t* @example\n\t* var data = [ 1, 2, 3 ];\n\t* var out = shuffle( data );\n\t* // e.g., returns [ 3, 1, 2 ]\n\t*\n\t* @example\n\t* var data = [ 1, 2, 3 ];\n\t* var out = shuffle( data, {\n\t*     'copy': 'none'\n\t* });\n\t* var bool = ( data === out );\n\t* // returns true\n\t*/\n\tfunction shuffle( arr, options ) {\n\t\tvar strflg;\n\t\tvar level;\n\t\tvar copy;\n\t\tvar opts;\n\t\tvar err;\n\t\tvar out;\n\t\tvar tmp;\n\t\tvar N;\n\t\tvar i;\n\t\tvar j;\n\n\t\tif ( !( isArrayLike( arr ) || isTypedArrayLike( arr ) ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be array-like. Value: `%s`.', arr ) );\n\t\t}\n\t\tif ( arguments.length > 1 ) {\n\t\t\topts = {};\n\t\t\terr = validate( opts, options );\n\t\t\tif ( err ) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t\tcopy = ( opts && opts.copy ) ? opts.copy : conf.copy;\n\n\t\tstrflg = isString( arr );\n\t\tif ( strflg ) {\n\t\t\tarr = arr.split( '' );\n\t\t\tcopy = 'none';\n\t\t}\n\n\t\tlevel = 0;\n\t\tif ( copy === 'shallow' ) {\n\t\t\tlevel += 1;\n\t\t} else if ( copy === 'deep' ) {\n\t\t\tlevel += 2;\n\t\t}\n\t\tN = arr.length;\n\t\tout = deepCopy( arr, level );\n\n\t\t// Note: we skip the first element, as no further swaps are possible given that all other indices are excluded from swapping...\n\t\tfor ( i = N - 1; i > 0; i-- ) {\n\t\t\t// Generate an integer index on the interval [0,i]:\n\t\t\tj = floor( rand() * (i+1.0) );\n\n\t\t\t// Swap elements:\n\t\t\ttmp = out[ i ];\n\t\t\tout[ i ] = out[ j ];\n\t\t\tout[ j ] = tmp;\n\t\t}\n\n\t\tif ( strflg ) {\n\t\t\tout = arr.join( '' );\n\t\t}\n\t\treturn out;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a random permutation of elements from an array-like object.\n*\n* @module @stdlib/random-shuffle\n*\n* @example\n* var shuffle = require( '@stdlib/random-shuffle' );\n*\n* var data = [ 1, 2, 3 ];\n* var out = shuffle( data );\n* // e.g., returns [ 3, 1, 2 ]\n*\n* out = shuffle( data, {\n*     'copy': 'none'\n* });\n*\n* var bool = ( data === out );\n* // returns true\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar shuffle = require( './shuffle.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( shuffle, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = shuffle;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns a random permutation of elements in `arr`.\n*\n* @name shuffle\n* @type {Function}\n* @param {ArrayLike} arr - array-like object to shuffle\n* @param {Options} [options] - function options\n* @param {string} [options.copy=\"shallow\"] - string indicating whether to return a copy (`deep`,`shallow` or `none`)\n* @throws {TypeError} options must be an object\n* @throws {TypeError} must provide valid options\n* @returns {ArrayLike} the shuffled array-like object\n*\n* @example\n* var data = [ 1, 2, 3 ];\n* var out = shuffle( data );\n* // e.g., returns [ 3, 1, 2 ]\n*\n* @example\n* var data = [ 1, 2, 3 ];\n* var out = shuffle( data, {\n*     'copy': 'none'\n* });\n* var bool = ( data === out );\n* // returns true\n*/\nvar shuffle = factory();\n\n\n// EXPORTS //\n\nmodule.exports = shuffle;\n"],"names":["hasOwnProp","require$$0","isString","require$$1","isPrimitive","isObject","require$$2","format","require$$3","validate_1","opts","options","TypeError","copy","setReadOnly","isArrayLike","isTypedArrayLike","deepCopy","require$$4","floor","require$$5","randu","require$$6","factory","require$$7","defaults","require$$8","validate","require$$9","factory_1","config","conf","rand","err","arguments","length","seed","shuffle","normalized","arr","strflg","level","out","tmp","N","i","j","split","join","lib"],"mappings":";;w5BAsBIA,EAAaC,EACbC,EAAWC,EAAsCC,YACjDC,EAAWC,EACXC,EAASC,EA+Cb,IAAAC,EAvBA,SAAmBC,EAAMC,GACxB,IAAMN,EAAUM,GACf,OAAO,IAAIC,UAAWL,EAAQ,qEAAsEI,IAErG,GAAKX,EAAYW,EAAS,QAAW,CAEpC,GADAD,EAAKG,KAAOF,EAAQE,MACdX,EAAUQ,EAAKG,MACpB,OAAO,IAAID,UAAWL,EAAQ,8DAA+D,OAAQG,EAAKG,OAE3G,GACe,SAAdH,EAAKG,MACS,YAAdH,EAAKG,MACS,SAAdH,EAAKG,KAEL,OAAO,IAAID,UAAWL,EAAQ,mFAAoFG,EAAKG,OAGzH,OAAO,MC5CJC,EAAcb,EACdc,EAAcZ,EACda,EAAmBV,EACnBJ,EAAWM,EAAsCJ,YACjDa,EAAWC,EACXC,EAAQC,EACRC,EAAQC,EAAyCC,QACjDhB,EAASiB,EACTC,EAAWC,EACXC,EAAWC,EAqIf,IAAAC,EA/GA,SAAkBC,GACjB,IAAIC,EACAC,EACAC,EAGJ,GADAF,EAAOd,EAAUQ,GACZS,UAAUC,SACdF,EAAMN,EAAUI,EAAMD,IAErB,MAAMG,EAeR,OAXCD,EADIF,GAAUA,EAAOM,KACdf,EAAM,CACZe,KAAQN,EAAOM,OAGTf,IAERP,EAAauB,EAAS,OAAQL,EAAKI,MACnCtB,EAAauB,EAAS,OAAQL,GAE9BA,EAAOA,EAAKM,WAELD,EA2BP,SAASA,EAASE,EAAK5B,GACtB,IAAI6B,EACAC,EACA5B,EACAH,EACAuB,EACAS,EACAC,EACAC,EACAC,EACAC,EAEJ,IAAQ/B,EAAawB,KAASvB,EAAkBuB,GAC/C,MAAM,IAAI3B,UAAWL,EAAQ,oEAAqEgC,IAEnG,GAAKL,UAAUC,OAAS,IAEvBF,EAAMN,EADNjB,EAAO,GACeC,IAErB,MAAMsB,EAqBR,IAlBApB,EAASH,GAAQA,EAAKG,KAASH,EAAKG,KAAOkB,EAAKlB,MAEhD2B,EAAStC,EAAUqC,MAElBA,EAAMA,EAAIQ,MAAO,IACjBlC,EAAO,QAGR4B,EAAQ,EACM,YAAT5B,EACJ4B,GAAS,EACW,SAAT5B,IACX4B,GAAS,GAEVG,EAAIL,EAAIJ,OACRO,EAAMzB,EAAUsB,EAAKE,GAGfI,EAAID,EAAI,EAAGC,EAAI,EAAGA,IAEvBC,EAAI3B,EAAOa,KAAUa,EAAE,IAGvBF,EAAMD,EAAKG,GACXH,EAAKG,GAAMH,EAAKI,GAChBJ,EAAKI,GAAMH,EAMZ,OAHKH,IACJE,EAAMH,EAAIS,KAAM,KAEVN,IClHTL,ECrBcpC,IDsBdsB,EAAAjB,EAFAL,EAOAoC,EAAA,UAAAd,GAKA,IAAA0B,EAAAZ"}